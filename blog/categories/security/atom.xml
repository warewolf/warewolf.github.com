<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security, | Technical Generalism]]></title>
  <link href="http://warewolf.github.io/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://warewolf.github.io/"/>
  <updated>2013-09-21T13:09:49-04:00</updated>
  <id>http://warewolf.github.io/</id>
  <author>
    <name><![CDATA[Richard Harman]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Read-only root filesystems]]></title>
    <link href="http://warewolf.github.io/blog/2013/09/21/read-only-root-filesystems/"/>
    <updated>2013-09-21T11:47:00-04:00</updated>
    <id>http://warewolf.github.io/blog/2013/09/21/read-only-root-filesystems</id>
    <content type="html"><![CDATA[<p>This is a quick post - I&#8217;ll flesh it out later, I promise.  I haven&#8217;t posted in a while, and I wanted to brain dump what I&#8217;m working on at home in some VMs.</p>

<p>Long story short: I accept the fact that at some point, all of my computers will be compromised.  Whether that compromise is mass-malware, or some kind of targeted attack is irrelevant.  The point is <em>some kind of unauthorized change</em> will occur.  If I can reduce the number of disk locations that are writable, I can reduce the number of locations an attacker can leverage to remain on my system.<!-- more --></p>

<p>It&#8217;s entirely possible to remain persistent on a system w/o making any changes on-disk, but that&#8217;s outside of the scope of this post.  Lets assume for the sake of argument that the attacker will want to keep my computer compromised.  They&#8217;ll need to make some kind of change so they can stay on the system.  Replacing the binary of a <a href="http://it.slashdot.org/story/13/01/26/0047257/trojanized-ssh-daemon-in-the-wild-sending-passwords-to-iceland">system service with a trojanized one</a>, adding a new service to start on boot (e.g. in /etc/init.d, or in /etc/systemd), modifying some user&#8217;s login scripts, or reoccuring scheduled task (via crond, or atd, etc).</p>

<p>It&#8217;s my goal to reduce the number of locations that the attacker can add new things, or replace existing things to keep their foothold on my system.  If they can&#8217;t add new things to come up on boot, it&#8217;s more difficult.  This isn&#8217;t perfect, but something that could be part of an overall security-minded system posture.</p>

<p>I know that having a UNIX box&#8217;s filesystems read-only isn&#8217;t a pancea, I read an article once that described a specialized UNIX box that had it&#8217;s root filesystem in a read-only flash/PROM device - which the vendor said made it more secure - ultimately, the executables on the read-only device had vulnerabilities, which couldn&#8217;t be patched because the filesystem couldn&#8217;t be modified.  So there are ups and downs of this concept.</p>

<p>Fedora has <a href="http://fedoraproject.org/wiki/StatelessLinux">read-only root</a> support, enabled by /etc/sysconfig/readonly-root.  To get it working on a brand new install, you need to do two or three things.</p>

<ol>
  <li>Comment out the root filesystem in /etc/fstab - otherwise it will be mounted read-write (this also comes with a side-benefit, alternate root filesystems).</li>
  <li>Create one or two new filesystems with a specific label for retaining state (read /etc/sysconfig/readonly-root for details).</li>
</ol>

<p>At this point you should have a read-only root filesystem.  Any other filesystems (like /boot) are most likely still read-write, so you&#8217;d have to change those to read-only if you want them locked down too.</p>

<p>Bonus: <a href="http://www.linode.com/?r=8304c52b0c2b67372d5dcbe998ee4e04271275d6">Linode</a> has an <a href="https://www.linode.com/api/linode/linode.disk.update">API method w/ a read-only flag</a> to set VPS disks to read-only.</p>

<!-- #### Footnotes

[^1]: description
http://kramdown.rubyforge.org/quickref.html -->
]]></content>
  </entry>
  
</feed>
